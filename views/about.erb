<h1>About Interactive 3D Programming</h1>

<p>This workgroup's mission is to come together to learn and fortify our collective knowledge of Javascript, OpenGl, Mathematics and Programming Techniques to enrich our website creation. By using the <a href="https://www.udacity.com/course/cs291" rel="external">course found on Udacity of the same name</a>, and the book <a href="http://www.reedbushey.com/85Webgl%20Up%20and%20Running.pdf" rel="external">WebGl Up and Running</a> (also, you can download all relevant code from this book from this <a href="https://github.com/tparisi/WebGLBook" rel="external">SITE</a>, but don't just copy and paste. Also, grab a test server <a href="https://github.com/ryanbartley/classTestServer">HERE</a>. Instructions to use it are in the Readme.md), we'll cover in a unified manner the basic principles of 3D computer graphics: meshes, transforms, cameras, materials, lighting, and animation, as well as the use of the 3d Graphics Api, Three.js.</p>

<p>By the end of our workgroup, members will know enough to make an animated 3D demo program that runs in a web browser, while also understanding the basic principles of how realistic computer images are generated.</p>

<p>We will also create a unified website to demo our work along the way. Specifically the site will be used to show each other different and interesting techniques we design along the way as well as a demo to our advisors of our work completion. Final awarding of credit will be decided by ITP faculty based on documentation on the web site.</p>

<h2>Course Overview:</h2>
<ul>
	<li>
		Lesson 1: Introduction
		Motivation and a trip down the graphics pipeline, laying out the fundamental processes<br>
		Assignment 1: Read the first chapter in WebGL Up and Running, above. Do the introduction example to WebGL and usage. Feel free and please look at what you have at the end and personalize it, with any parameters you might like, i.e. adding new colors, using new locations for the vertices of the triangle. Just play around with it. Upload what you create to the website by adding a page from your profile. Look above to download the relevant code from the examples in the book.<br>
		<iframe width="420" height="315" src="//www.youtube.com/embed/L_KRIUcyPBM" frameborder="0" allowfullscreen></iframe>
	</li>
	<br>
	<li>	
		Lesson 2: Points, Vectors, and Meshes
		The basics of 3D geometry definition<br>
		Assignment 2: Finish the Lesson 2 Problem set that we started in class. Read the second chapter in Webgl Up and Running. This will be the first pure Three.js stuff we'll have written and pay close attention to what you're writing and the steps as they are ordered. I'd like for you to do and post this example. Afterwards, create another page that you set up yourself with different settings and animation and textures. Play with settings. Remember, you won't kill your computer by breaking your code. So, don't be afraid to try things! :) I'll have another session this week that I'll again post to youtube that will basically create the Three.js Vector3 class from scratch so that you can see how to create objects and review why these data structures exist. <br>
		<iframe width="420" height="315" src="//www.youtube.com/embed/-ebM7MiXVSA" frameborder="0" allowfullscreen></iframe>
	</li>
	<br>
	<li>
		Lesson 3: Colors and Materials
		Color representation, material computations, transparency
		Assignment 3: This weeks homework will be to use the things we've learned so far to code a site from scratch. Three.js has almost 1,000,000 examples at threejs.org/examples and all the source code is available. The second part of the homework will be to watch the transforms unit before class so that we can get deeper into it in class as well as reading the 3rd chapter in the book.<br>
		<iframe width="420" height="315" src="//www.youtube.com/embed/F3sJ5k1QFJs" frameborder="0" allowfullscreen></iframe>
	</li>
	
	<li>
		Lesson 4: Transforms
		Translation, scale, rotate and how to properly combine all these
	</li>
	
	<li>
		Lesson 5: Matrices
		Transform representation and how to fully control these
	</li>
	
	<li>
		Lesson 6: Lights
		Directional and point light sources
	</li>
	
	<li>
		Lesson 7: Cameras
		How the camera is defined
	</li>

	<li>
		Lesson 8: Textures and Reflections
		Color and opacity textures, along with reflection and normal mapping
	</li>
	
	<li>
		Lesson 9: Shader Programming
		An introduction to programming vertex and pixel shaders
	</li>
	
	<li>
		Lesson 10: Interaction and Animation
		How to select and make objects move
	</li>
	

</ul>
